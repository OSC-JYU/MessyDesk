
TODO

- implement sets
- crunchers creator as pop up (does not mess graph)

- virtual crunchers (tesseract orientation detection + imaginary rotate = fix orientation)

 
DONE
- text file description from text content OK





ArcadeDB:

 docker run --rm -p 2480:2480 -p 2424:2424 -v messydesk_arcade:/home/arcadedb/databases  -e JAVA_OPTS="-Darcadedb.server.rootPassword=node_master" arcadedata/arcadedb:23.7.1



NATS:

start with monitoring and jetstreams enabled:

  docker run -d --name nats-main -p 4222:4222 -p 6222:6222 -p 8222:8222 nats -js -m 8222


monitoring:
http://localhost:8222/jsz?consumers=true


NOMAD:

  sudo nomad agent -dev  

monitoring:
http://localhost:4646/ui/jobs

docker version for local development:
https://github.com/multani/docker-nomad



NOMAD + podman
https://support.hashicorp.com/hc/en-us/articles/20752437319955-Configuring-nomad-podman-driver-with-a-Nomad-Cluster-and-Running-a-Nomad-Job-Using-the-Podman-Driver


podman unix socket must be activated: /run/podman/podman.sock
https://github.com/containers/podman/blob/main/docs/tutorials/socket_activation.md

sudo systemctl start podman.socket


/etc/nomad.d/nomad.hcl

server {
  # license_path is required for Nomad Enterprise as of Nomad v1.1.1+
  #license_path = "/etc/nomad.d/license.hclic"
  enabled          = true
  bootstrap_expect = 1
}

client {
  enabled = true
  servers = ["127.0.0.1"]
  options = {
    "driver.denylist" = "docker"
  }
}
plugin "nomad-driver-podman" {
  config {
    volumes {
      enabled      = true
      selinuxlabel = "z"
    }
  }
}




sudo nomad agent -dev -plugin-dir=/opt/nomad/plugins -config=/etc/nomad.d


check podman driver:
nomad node status
nomad node status <nomad_client_node_id> | grep -i "Driver status"
nomad node status -verbose <nomad_client_node_id> | grep -i "podman"


Container reposiotry authentication in services .hcl:

            auth {
              username = ""
              password = ""
            }



CONTAINER PORTS (when running locally):

MD-poppler            8300
MD-tesseract          8400
MD-pdfalto            8500
MD-finbert-ner        8600
MD-human              8700
MD-imaginary          9000
  

http --form POST :9000/thumbnail file@OK_Kiviaho_Pekka.pdf width=200


INTERNAL API:

start backend with different database and data dir:
MODE=development DB_PASSWORD=node_master DB_NAME=md_test DATA_DIR=test nodemon index.js

modify and and internal.js (in 'test' directory so that data dir is created under 'test'):
MODE=development DB_PASSWORD=node_master DB_NAME=md_test node internal.js





MISC:


graph alternative:
https://github.com/jagenjo/litegraph.js/



CRUNCHES suggestions:

https://github.com/mattiasw/ExifReader

img2table: https://github.com/xavctn/img2table
  - html export: https://github.com/xavctn/img2table/issues/92



line removal: 
https://stackoverflow.com/questions/33949831/how-to-remove-all-lines-and-borders-in-an-image-while-keeping-text-programmatica

convert input.jpg                           \
-type Grayscale                             \
-negate                                     \
-define morphology:compose=darken           \
-morphology Thinning 'Rectangle:1x30+0+0<'  \
-negate                                     \
converted_image.jpg



https://deepdoctection.readthedocs.io/en/latest/tutorials/get_started_notebook/

NER:
https://medium.com/quantrium-tech/top-3-packages-for-named-entity-recognition-e9e14f6f0a2a

Kansalliskirjasto: nimientiteettien tunnistus:
https://www.doria.fi/bitstream/handle/10024/187816/Nimientiteettien%20tunnistus.20230830.pdf?sequence=1&isAllowed=y

https://github.com/DALAI-project/NER_API


GREY LITERATURE METADATA EXTRACTION:
https://www.doria.fi/bitstream/handle/10024/188075/Tekoa%cc%88lykahvit_%20Extracting%20metadata%20using%20LLMs.pdf?sequence=1&isAllowed=y


OCR:
https://github.com/mindee/doctr
mitä kieliä tukee?
https://github.com/mindee/doctr/discussions/837

https://medium.com/quantrium-tech/text-extraction-using-doctr-ocr-471e417764d5


https://github.com/rescribe

HOCR:
https://github.com/ocropus/hocr-tools

Layout analysis:
https://dhlab-epfl.github.io/dhSegment/
https://pypi.org/project/doc-ufcn/


dewarp:
https://github.com/lmmx/page-dewarp

deskew:
https://github.com/sbrunner/deskew
https://github.com/kakul/Alyn

denoising:
https://stackoverflow.com/questions/49318622/denoising-binary-image-in-python

https://github.com/Leedeng/SauvolaNet

https://stackoverflow.com/questions/62042172/how-to-remove-noise-in-image-opencv-python


Image annotation:
https://www.robots.ox.ac.uk/~vgg/software/via/via.html

Image duplicates or similar:
https://github.com/dsys/match
https://github.com/rhsimplex/image-match
http://www.phash.org/

pytorch container:
docker run --rm -ti --ipc=host pytorch/pytorch:latest

from transformers import pipeline

pipe = pipeline("token-classification", model="Kansallisarkisto/finbert-ner")
tulos = pipe('Kyllösen vanhempi poika Erkki oli kova mies')
print(tulos)





SQL:
MATCH {type: Project, as: project}-HAS_FILE->
{type:File, as: file, where:(set IS NULL)} RETURN project,file
