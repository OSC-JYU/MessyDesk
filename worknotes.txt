
TODO

- text file description from text content
- virtual crunchers (tesseract orientation detection + imaginary rotate = fix orientation)




How to run:

 docker run --rm -p 2480:2480 -p 2424:2424 -v messydesk_arcade:/home/arcadedb/databases  -e JAVA_OPTS="-Darcadedb.server.rootPassword=node_master" arcadedata/arcadedb:23.7.1

cd test/kafka
docker-compose up

 MODE=development DB_PASSWORD=node_master nodemon index.js 


start thumbnailer service:
docker run --name md-imaginary -p 9000:9000 nextcloud/aio-imaginary

Register thumbnailer queue:
curl http://localhost:8200/api/services -d "@test/services/thumbnailer/service.json" --header "Content-Type: application/json"



NATS:

start with monitoring and jetstreams enabled:

  docker run -d --name nats-main -p 4222:4222 -p 6222:6222 -p 8222:8222 nats -js -m 8222


monitoring:
http://localhost:8222/jsz?consumers=true






  GREMLIN

g.V('#105:7')
  .as('f')
  .repeat(both().simplePath())
  .until(hasLabel('Project'))
  .in('IS_OWNER')
  .hasLabel('Person')
  .has('id', 'ari.hayrinen@jyu.fi')
  .select('f')



graph alternative:
https://github.com/jagenjo/litegraph.js/


line removal: 
https://stackoverflow.com/questions/33949831/how-to-remove-all-lines-and-borders-in-an-image-while-keeping-text-programmatica

convert input.jpg                           \
-type Grayscale                             \
-negate                                     \
-define morphology:compose=darken           \
-morphology Thinning 'Rectangle:1x30+0+0<'  \
-negate                                     \
converted_image.jpg



https://deepdoctection.readthedocs.io/en/latest/tutorials/get_started_notebook/

NER:
https://medium.com/quantrium-tech/top-3-packages-for-named-entity-recognition-e9e14f6f0a2a

Kansalliskirjasto: nimientiteettien tunnistus:
https://www.doria.fi/bitstream/handle/10024/187816/Nimientiteettien%20tunnistus.20230830.pdf?sequence=1&isAllowed=y

https://github.com/DALAI-project/NER_API


GREY LITERATURE METADATA EXTRACTION:
https://www.doria.fi/bitstream/handle/10024/188075/Tekoa%cc%88lykahvit_%20Extracting%20metadata%20using%20LLMs.pdf?sequence=1&isAllowed=y


OCR:
https://github.com/mindee/doctr
mitä kieliä tukee?
https://github.com/mindee/doctr/discussions/837

https://medium.com/quantrium-tech/text-extraction-using-doctr-ocr-471e417764d5


Layout analysis:
https://dhlab-epfl.github.io/dhSegment/
https://pypi.org/project/doc-ufcn/


dewarp:
https://github.com/lmmx/page-dewarp

deskew:
https://github.com/sbrunner/deskew
https://github.com/kakul/Alyn

denoising:
https://stackoverflow.com/questions/49318622/denoising-binary-image-in-python

https://github.com/Leedeng/SauvolaNet

https://stackoverflow.com/questions/62042172/how-to-remove-noise-in-image-opencv-python


Image annotation:
https://www.robots.ox.ac.uk/~vgg/software/via/via.html

Image duplicates or similar:
https://github.com/dsys/match
https://github.com/rhsimplex/image-match
http://www.phash.org/

pytorch container:
docker run --rm -ti --ipc=host pytorch/pytorch:latest

from transformers import pipeline

pipe = pipeline("token-classification", model="Kansallisarkisto/finbert-ner")
tulos = pipe('Kyllösen vanhempi poika Erkki oli kova mies')
print(tulos)


KAFKAN KORVAAJA? https://zeromq.org/


SQL:
MATCH {type: Project, as: project}-HAS_FILE->
{type:File, as: file, where:(set IS NULL)} RETURN project,file